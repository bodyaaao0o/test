name: Run Playwright tests for IA and AA

on:
  pull_request:
    branches:
      - staging
  push:
    branches:
      - main

jobs:
  setup:
    name: Install dependencies and cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: penomo-tests-${{ hashFiles('penomo_tests/package-lock.json') }}
          restore-keys: |
            penomo-tests-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Save node_modules as artifact (for later jobs)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: ./node_modules
          retention-days: 1

  desktop-tests:
    name: Run Desktop Tests
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules (if not cached)
        uses: actions/download-artifact@v4
        with:
          name: node_modules
          path: ./node_modules

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run auth tests (Desktop)
        run: npx playwright test ./auth --project=chromium

      - name: Run E2E tests (Desktop)
        run: npx playwright test ./E2E --project=chromium

  mobile-tests:
    name: Run Mobile Tests
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules (if not cached)
        uses: actions/download-artifact@v4
        with:
          name: node_modules
          path: ./node_modules

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run auth tests (Mobile)
        run: npx playwright test ./auth/login.spec.ts --project="Mobile Safari"

      - name: Run E2E tests (Mobile)
        run: npx playwright test ./E2E --project="Mobile Safari"

      # Allure + Slack ‚Üì –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
      - name: Install Allure CLI
        if: always()
        run: npm install -g allure-commandline

      - name: Generate Allure Report
        if: failure()
        run: npx allure generate ./allure-results -o ./allure-report --clean

      - name: Upload Allure report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
          retention-days: 3

      - name: Upload Allure raw results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./allure-results
          retention-days: 3

      - name: Extract failure reason from Allure
        if: failure()
        run: |
          echo "Getting failure reason from Allure results..."
          REASON=$(jq -r 'select(.status=="failed") | .statusDetails.message // .statusDetails.trace' allure-results/*.json | head -n 1 | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "REASON=$REASON" >> $GITHUB_ENV

      - name: Send Slack notification on test failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"‚ùå *Playwright tests failed* on *${{ github.ref_name }}*\\n*Reason:* \`\`\`${{ env.REASON }}\`\`\`\\nüîé <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View run>\"
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
