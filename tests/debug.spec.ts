import { test, expect, BrowserContext, Page, chromium, firefox } from '@playwright/test';
import { PageManager } from '../support/PageObject/pageManager';
import { env } from '../support/data';
import { checkVisibility } from '../support/PageObject/pageManager';
import { adminLogin } from '../support/login_as_admin';
import { investorLogin } from '../support/login_as_investor';
import {
    setupComprehensiveMocking,
    completeChallengesStepByStep,
    debugAllRequests, setupMockClaimReward, claimState//autoCompleteAllChallenges,// checkRewardStates
} from '../support/quests_complete';

interface Challenge {
    challengeStaticId: string;
    isChallengeCompleted?: boolean;
    challengeCompletedAt?: string;
    [key: string]: any;
}

test.describe("Quests complete test", () => {
    let pm: PageManager;
    let page: Page;

    test("Progressive challenges completion", async ({ page, context }) => {
        pm = new PageManager(page);

        // –í–∫–ª—é—á–∞—î–º–æ –≤—ñ–¥–ª–∞–¥–∫—É –∑–∞–ø–∏—Ç—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        await debugAllRequests(page);

        await investorLogin(page, context, pm);

        await expect(page).toHaveURL("https://dev.invest.penomo.com/dashboard");
        await pm.dashboardTo().getCampaignsNav().click();
        await expect(page).toHaveURL('https://dev.invest.penomo.com/campaigns');

        await checkVisibility([
            pm.questsTo().getCampaignsNavBar(),
            pm.questsTo().getInfoPage(),
            pm.questsTo().getQuestsPage(),
            pm.questsTo().getLeaderboardPage(),
            pm.questsTo().getInfoTitle(),
            pm.questsTo().getInfoDescription(),
            pm.questsTo().getReferalLinkBox(),
            pm.questsTo().getXPHelpText()
        ]);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂—ñ–≤
        const unlockedCountRef = { current: 0 };

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫–∞–Ω–Ω—è API –û–î–ò–ù –†–ê–ó –Ω–∞ –ø–æ—á–∞—Ç–∫—É (—Ü–µ –∫–ª—é—á–æ–≤–∏–π –º–æ–º–µ–Ω—Ç!)
        console.log('üîß Setting up API mocking ONCE...');
        await setupComprehensiveMocking(page, unlockedCountRef);

        await pm.questsTo().getQuestsPage().click();
        await expect(page).toHaveURL('https://dev.invest.penomo.com/campaigns?section=quests');

        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç—É—Ç–æ—Ä—ñ–∞–ª
        console.log('‚è≠Ô∏è Skipping tutorial...');
        await pm.questsTo().getSkipButton().click();

        await checkVisibility([
            pm.questsTo().getCompleteYourTasks(),
            pm.questsTo().getCompleteYourTasksDescription(),
            pm.questsTo().getCompleteYourTasksVideoHelp(),
            pm.questsTo().getBackButton(),
            pm.questsTo().getNextButton(),
        ]);

        await pm.questsTo().getNextButton().click();
        await checkVisibility([
            pm.questsTo().getQuantumCoresPage(),
            pm.questsTo().getQuantumCoresDescription(),
            pm.questsTo().getQuantumCoresVideo(),
            pm.questsTo().getBackButton(),
            pm.questsTo().getNextButton()
        ]);

        await pm.questsTo().getNextButton().click();

        await checkVisibility([
            pm.questsTo().getBewareOfDoomCoresPage(),
            pm.questsTo().getBewareOfDoomCoresDescription(),
            pm.questsTo().getBewareOfDoomCoresVideo(),
            pm.questsTo().getLetsStartButton(),
            pm.questsTo().getBackButton()
        ]);

        await pm.questsTo().getLetsStartButton().click();
        await checkVisibility([
            pm.questsTo().getActiveQuests(),
            pm.questsTo().getQuestsComplete(),
            pm.questsTo().getClaimedXP(),
            pm.questsTo().getCompletionProgress()
        ]);

        // –ß–µ–∫–∞—î–º–æ, —â–æ–± –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è
        await page.waitForSelector('.hexagon', { timeout: 10000 });

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂—ñ–≤
        const allHexagons = page.locator('.hexagon');
        const totalChallenges = await allHexagons.count();
        console.log(`üìä Total challenges found: ${totalChallenges}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (–±–µ–∑ –º–æ–∫–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ 0 –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö)
        const initialGreenHexagons = page.locator('.hexagon').filter({
            has: page.locator('svg.text-black')
        });
        const initialCompletedCount = await initialGreenHexagons.count();
        console.log(`üìà Initially completed challenges: ${initialCompletedCount}`);

        // –í–∏–∫–æ–Ω—É—î–º–æ —á–µ–ª–ª–µ–Ω–¥–∂—ñ –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–∏–º
        const challengesToComplete = Math.min(5, totalChallenges);
        console.log(`üéØ Will complete ${challengesToComplete} challenges out of ${totalChallenges}`);

        await completeChallengesStepByStep(page, pm, challengesToComplete, unlockedCountRef);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        console.log(`‚ú® Verification: Completed ${challengesToComplete} challenges out of ${totalChallenges}`);

        // –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂—ñ–≤
        await page.waitForTimeout(2000); // –ß–µ–∫–∞—î–º–æ, —â–æ–± UI –æ–Ω–æ–≤–∏–≤—Å—è

        const finalGreenHexagons = page.locator('.hexagon').filter({
            has: page.locator('svg.text-black')
        });
        const finalCompletedCount = await finalGreenHexagons.count();

        // –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
        console.log(`üîç Final verification:`);
        console.log(`   - Expected completed: ${challengesToComplete}`);
        console.log(`   - Actually completed: ${finalCompletedCount}`);
        console.log(`   - Unlock counter: ${unlockedCountRef.current}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        expect(finalCompletedCount).toBeGreaterThanOrEqual(1); // –ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–∏–Ω —á–µ–ª–ª–µ–Ω–¥–∂ –º–∞—î –±—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
        console.log(`‚úÖ Test passed: ${finalCompletedCount} challenges confirmed as completed`);

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        await checkVisibility([
            pm.questsTo().getActiveQuests(),
            pm.questsTo().getQuestsComplete(),
            pm.questsTo().getClaimedXP(),
            pm.questsTo().getCompletionProgress()
        ]);

        console.log('üéâ Test completed successfully!');
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏ –º–æ–∫–∞–Ω–Ω—è
    test("Debug API mocking", async ({ page, context }) => {
        pm = new PageManager(page);

        await investorLogin(page, context, pm);
        await pm.dashboardTo().getCampaignsNav().click();

        const unlockedCountRef = { current: 2 };

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–æ–∫—ñ–Ω–≥
        await setupMockClaimReward(page);

        await pm.questsTo().getQuestsPage().click();
        await page.waitForTimeout(3000);

        await pm.questsTo().getSkipButton().click();
        await pm.questsTo().getNextButton().click();
        await pm.questsTo().getNextButton().click();
        await pm.questsTo().getLetsStartButton().click();

        for (let i = 2; i <= 10; i++) {
            console.log(`üîÑ Processing quest iteration ${i}`);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            unlockedCountRef.current = i;

            // –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–∫—ñ–Ω–≥ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ unlockedCountRef
            await setupComprehensiveMocking(page, unlockedCountRef);

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
            await page.reload();
            await page.waitForTimeout(2000); // –ó–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

            // –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥
            const rewardButtons = await page.locator('svg.text-green-500').all();
            console.log(`üéØ Found ${rewardButtons.length} reward buttons for iteration ${i}`);

            for (const [buttonIndex, iconHandle] of rewardButtons.entries()) {
                try {
                    const clickable = await iconHandle.evaluateHandle(el => {
                        let current: HTMLElement | null = el as HTMLElement;
                        while (current && current.parentElement) {
                            current = current.parentElement as HTMLElement;
                            if (
                                current.tagName === 'BUTTON' ||
                                current.getAttribute('role') === 'button' ||
                                typeof (current as any).onclick === 'function'
                            ) {
                                return current;
                            }
                        }
                        return el;
                    });

                    await clickable.asElement()?.click();
                    await page.waitForTimeout(1500); // –ó–±—ñ–ª—å—à—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
                    console.log(`‚úÖ Claimed reward ${buttonIndex + 1} for quest iteration ${i}`);
                } catch (e) {
                    console.log(`‚ö†Ô∏è Failed to click reward ${buttonIndex + 1} for quest iteration ${i}:`, e);
                }
            }

            // –î–æ–¥–∞—î–º–æ –ø–∞—É–∑—É –º—ñ–∂ —ñ—Ç–µ—Ä–∞—Ü—ñ—è–º–∏
            await page.waitForTimeout(1000);
        }

        console.log('‚úÖ Debug test completed');
        //console.log(`üèÜ Final total points: ${totalPointsEarned}`);
        //console.log(`üìã Total claimed quests: ${questClaimStates.size}`);
    });
});